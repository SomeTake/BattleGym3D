//=============================================================================
//
// 当たり判定処理 [HitCheck.cpp]
// Author : HAL東京 GP11B341-17 80277 染谷武志
//
//=============================================================================
#include "main.h"
#include "HitCheck.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//=====================================================================================================
// 当たり判定
// centerPosA = 中心位置, centerPosB = 中心位置, r1 = 半径, r2 = 半径
//=====================================================================================================
bool hitBC(D3DXVECTOR3 centerPosA, D3DXVECTOR3 centerPosB, float r1, float r2)
{
	//距離の計算
	D3DXVECTOR3 temp = centerPosA - centerPosB;
	float fLengthSq = D3DXVec3LengthSq(&temp);

	if (fLengthSq <= ((r1 + r2) * (r1 + r2)))		//当たったとき
	{
		return true;
	}

	return false;
}

//=====================================================================================================
// 当たり判定
// pos1 = 攻撃側攻撃判定, pos2 = 防御側体判定, size1 = 攻撃側攻撃範囲, size2 = 防御側体範囲
//=====================================================================================================
bool hitBB(D3DXVECTOR3 pos1, D3DXVECTOR3 pos2, D3DXVECTOR3 size1, D3DXVECTOR3 size2)
{
	if ((pos2.x + size2.x > pos1.x - size1.x) && (pos1.x + size1.x > pos2.x - size2.x) &&
		(pos2.y + size2.y > pos1.y - size1.y) && (pos1.y + size1.y > pos2.y - size2.y) &&
		(pos2.z + size2.z > pos1.y - size1.z) && (pos1.z + size1.z > pos2.z - size2.z))
	{
		return true;
	}

	return false;
}
